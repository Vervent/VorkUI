---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by flori.
--- DateTime: 01/11/2020 20:58
---

local LibAtlas = LibStub:NewLibrary("LibAtlas", 1)

if not LibAtlas then
    return
end

local debug = 0
local pairs = pairs

local Atlas = {}


function LibAtlas:RegisterAtlas(name, path, spriteSheet)

    if Atlas[name] then
        return
    end
    Atlas[name] = {
        Path = path,
        Sprites = spriteSheet,
    }

    if debug == 1 then
        Atlas[name].OnUse = false
    end

end

function LibAtlas:GetAtlas(key)

    --check if string is name or path
    if Atlas[key] then
        if debug == 1 then
            Atlas[key].OnUse = true
        end
        return Atlas[key]
    end

    for k,v in pairs (Atlas) do
        if v.Path == key then
            if debug == 1 then
                v.OnUse = true
            end
            return v
        end
    end

    return nil
end

function LibAtlas:GetPath(key)
    if Atlas[key] then
        if debug == 1 then
            Atlas[key].OnUse = true
        end
        return Atlas[key].Path
    end
end

function LibAtlas:GetSheet(key)
    local atlas = self:GetAtlas(key)
    if atlas == nil then
        return nil
    end

    return atlas.Sprites
end

function LibAtlas:GetTexCoord(key, spriteName)

    local atlas = self:GetAtlas(key)

    if atlas == nil then
        return nil
    end

    local width = atlas.Sprites.width
    local height = atlas.Sprites.height
    local l, r, t, b = unpack(atlas.Sprites[spriteName])
    return l/width, r/width, t/height, b/height
end

function LibAtlas:GetSpriteData(key, spriteName)
    local atlas = self:GetAtlas(key)

    if atlas == nil then
        return nil
    end

    return atlas.Sprites[spriteName] or nil
end

function LibAtlas:GetDebugInfo()
    if debug ~= 1 then
        return
    end

    local redcolor = "FFFF2200"
    print("----- DEBUG LIBATLAS -----")
    for k,v in pairs(Atlas) do
        if k.OnUse == false then
            print ("|c"..redcolor..v.Path.."is never used |r")
        else
            print(v.Path)
        end
        for n,s in pairs(v.Sprites) do
            local l,r,t,b = unpack(s)
            print ("\t"..n.."("..l..", "..r..", "..t..", "..b..")")
        end
    end
end