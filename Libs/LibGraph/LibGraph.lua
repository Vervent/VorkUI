---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by flori.
--- DateTime: 27/01/2022 09:34
---
local LibGraph = LibStub:NewLibrary("LibGraph", 1)

if not LibGraph then
    return
end

local Methods = {

    GetListOrder = function(self)

        local node = self.root.Childs
        local max = #self.root.Childs

        local order = {}

        local i = 1
        while i <= max do

            for _, c in ipairs(node) do
                if #c.Childs == 0 then
                    order[i] = c.Name
                    i = i + 1
                end
            end

            for _, n in ipairs(order) do
                --print ('|cFF10FF10REMOVE NODE|r', n)
                self:RemoveNode(n)
            end
        end

        return order

    end,

    Contains = function(self, name)
        if not name then
            return false
        end

        for _, n in ipairs(self.root.Childs) do
            if n.Name == name then
                return true
            end
        end
        return false
    end,

    RemoveNode = function(self, name)
        if not name then
            return nil
        end

        local node
        for it = #self.root.Childs, 1, -1 do
            node = self.root.Childs[it]

            if node.Name == name then
                tremove(self.root.Childs, it)
            elseif node.Childs then
                for i = #node.Childs, 1, -1 do
                    if node.Childs[i] == name then
                        tremove(node.Childs, i)
                    end
                end
            end
        end

    end,

    AddNode = function(self, name, childs)
        if not name then
            return nil
        end

        local n = {
            ['Name'] = name,
            ['Childs'] = {}
        }

        local idx = #self.root.Childs
        if not childs then
            self.root.Childs[idx + 1] = n
        elseif type(childs) == 'string' then
            n.Childs[1] = childs
            self.root.Childs[idx + 1] = n
        elseif type(childs) == 'table' then
            for i, c in ipairs(childs) do
                n.Childs[i] = c
                self.root.Childs[idx + 1] = n
            end
        end

        return n

    end,
}

function LibGraph:CreateGraph()

    local Graph = {}
    setmetatable(Graph, { __index = Methods })

    Graph.root = {
        Childs = {}
    }

    return Graph

end
