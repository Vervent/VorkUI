---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by f.guilleminot.
--- DateTime: 31/12/2020 09:32
---

local V, C = select(2, ...):unpack()

local Themes = V.Themes
local Profiles = V.Profiles

local function registers(module, submodule, object, table)
    for _, item in ipairs(table) do
        Profiles:RegisterOption(module, submodule, object, unpack(item))
    end
end

local function textOption(module, submodule, name, layer, font, tag, points, layout)

    local data = {
        { name, 'Layer', layer },
        { name, 'Font', font },
        { name, 'Tag', tag },
    }

    if points[layout] ~= nil then
        data[4] = { name, 'Point', points[layout] }
    elseif type(points[1]) == 'string' then
        data[4] = { name, 'Point', points }
    end

    registers(module, submodule, 'Texts', data)
end

local function absorbOption(layout, module, submodule)

    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        { 'Slanting', 'Enable', true },
        { 'Slanting', 'IgnoreBackground', true },
        { 'Slanting', 'FillInverse', true },
        { 'Slanting', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiBubbles', 'ARTWORK' },
        { 'Rendering', nil, { 0, 0, 0, 1 }, 'BACKGROUND', 1 },
    }
    local size = #data

    if layout == 'Expanded' then
        data[size + 1] = { nil, 'Size', 114, 6 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT', 0, -16 }
    else
        data[size + 1] = { nil, 'Size', 116, 6 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT', 0, -10 }
    end

    registers(module, submodule, 'Absorb', data)

end

local function healthOption(layout, module, submodule)
    local data = {
        --TRANSFORM
        { nil, 'Enable', enable },
        ----SLANT
        { 'Slanting', 'Enable', true },
        { 'Slanting', 'IgnoreBackground', true },
        { 'Slanting', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBackground', 'BACKGROUND', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        --ATTRIBUTES
        { 'Attributes', 'colorSmooth', true },
    }

    local size = #data

    if layout == 'Expanded' then
        data[size + 1] = { nil, 'Size', 128, 24 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'BOTTOMRIGHT', -8, 0 }
    elseif layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 126, 16 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'TOPRIGHT', -4, 0 }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 156, 24 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'TOPRIGHT', 0, 0 }
    else
        print ('|cFFFF1010 BAD PARTY LAYOUT |r')
    end

    registers(module, submodule, 'Health', data)

end

local function healthPredictionOption(layout, module, submodule)
    local data = {
        { nil, 'Enable', true },
        ----SLANT
        { 'Slanting', 'Enable', true },
        { 'Slanting', 'IgnoreBackground', true },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
    }

    local size = #data

    if layout == 'Expanded' then
        data[size + 1] = { nil, 'Size', 128, 24 }
    elseif layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 126, 16 }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 156, 24 }
    else
        print ('|cFFFF1010 BAD PARTY LAYOUT |r')
    end

    registers(module, submodule, 'HealthPrediction', data)

end

local function castbarOption(layout, module, submodule)

    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        --TRANSFORM
        { nil, 'Point', 'TOP', 'Frame', 'BOTTOM', 0, -2 },
        { nil, 'StatusBarColor', { 0, 0.5, 1, 1 } },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBackground', 'BACKGROUND', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        --SPARK
        { 'Spark', 'Layer', 'OVERLAY' },
        { 'Spark', 'Size', 20, 20 },
        { 'Spark', 'BlendMode', 'ADD' },
        { 'CastSettings', 'AtlasName', 'Muzzle' },
        { 'CastSettings', 'Point', 'RIGHT', 'Castbar', 'RIGHT', 5, 0 },
        { 'ChannelSettings', 'AtlasName', 'Spark' },
        { 'ChannelSettings', 'Point', 'CENTER', 'Castbar', 'RIGHT', 0, 0 },
        --TAGS
        { 'Time', 'Layer', 'OVERLAY' },
        { 'Time', 'Font', 'DurationFont' },
        { 'Time', 'Point', 'RIGHT', 'Castbar' },

        { 'Text', 'Layer', 'OVERLAY' },
        { 'Text', 'Font', 'NormalFont' },
        { 'Text', 'Point', 'CENTER', 'Castbar' },

        --ICON
        { 'Icon', 'Size', 20, 20 },
        { 'Icon', 'Point', 'TOPLEFT', 'Castbar' },

        --SHIELD
        { 'Shield', 'Size', 20, 20 },
        { 'Shield', 'Point', 'LEFT', 'Text' },
        { 'Shield', 'Texture', 'GlobalIcon' },
        { 'Shield', 'TexCoord', 'DEFENSE' },

        --SAFEZONE
        { 'SafeZone', 'Layer', 'OVERLAY' },
        { 'SafeZone', 'BlendMode', 'ADD' },
        { 'SafeZone', 'VertexColor', { 255 / 255, 246 / 255, 0, 0.75 } },
    }

    if layout == 'Expanded' then
        data[#data + 1] = { nil, 'Size', 190, 20 }
    else
        data[#data + 1] = { nil, 'Size', 150, 20 }
    end

    registers(module, submodule, 'Castbar', data)

end

local function powerOption(layout, module, submodule)
    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        { nil, 'Point', 'TOPLEFT', 'Health', 'BOTTOMLEFT', -10, 0 },
        ----SLANT
        { 'Slanting', 'Enable', true },
        { 'Slanting', 'IgnoreBackground', true },
        { 'Slanting', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        { 'Attributes', 'colorPower', true },
        { 'Attributes', 'frequentUpdates', true },
        --TAGS
    }

    local size = #data

    if layout == 'Expanded' then
        data[size + 1] = { nil, 'Size', 117, 12 }
    else
        data[size + 1] = { nil, 'Size', 118, 8 }
    end

    registers(module, submodule, 'Power', data)

end

local function portraitOption(layout, module, submodule)
    local enable = true

    if layout ~= 'Expanded' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        --TRANSFORM
        { nil, 'Size', 58, 58 },
        { nil, 'Point', 'TOPLEFT', 'Frame', 'TOPLEFT' },
        { nil, 'Type', '3D' },
        { nil, 'ModelDrawLayer', 'BACKGROUND' },

        { 'PostUpdate', 'Position', { 0.2, 0, 0 } },
        { 'PostUpdate', 'Rotation', -math.pi / 5 },
        { 'PostUpdate', 'CamDistance', 2 },
    }

    registers(module, submodule, 'Portrait', data)

end

local function buffOption(layout, module, submodule)

    local enable = true

    if layout ~= 'Expanded' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        --TRANSFORM
        { 'Attributes', 'size', 24 },
        { 'Attributes', 'disableMouse', false },
        { 'Attributes', 'disableCooldown', false },
        { 'Attributes', 'onlyShowPlayer', true },
        { 'Attributes', 'showStealableBuffs', false },
        { 'Attributes', 'spacing', 2 },
        { 'Attributes', 'growth-x', 'LEFT' },
        { 'Attributes', 'growth-y', 'UP' },
        { 'Attributes', 'initialAnchor', 'BOTTOMRIGHT' },
        { 'Attributes', 'filter', 'HELPFUL' },
        { 'Attributes', 'tooltipAnchor', 'ANCHOR_BOTTOMRIGHT' },
        { 'Attributes', 'num', 6 },
    }

    local size = #data

    if layout == 'Expanded' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMRIGHT', 'Frame', 'BOTTOMLEFT', -2, 0 }
    elseif layout == 'Compact' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMRIGHT', 'Frame', 'BOTTOMLEFT', -2, 0 }
    elseif layout == 'Minimalist' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMRIGHT', 'Frame', 'BOTTOMLEFT', -2, 0 }
    end

    registers(module, submodule, 'Buffs', data)

end

local function debuffOption(layout, module, submodule)

    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        ----ATTRIBUTES
        { 'Attributes', 'onlyShowPlayer', false },
        { 'Attributes', 'disableMouse', false },
        { 'Attributes', 'disableCooldown', false },
        { 'Attributes', 'spacing', 2 },
        { 'Attributes', 'growth-x', 'RIGHT' },
        { 'Attributes', 'growth-y', 'UP' },
        { 'Attributes', 'initialAnchor', 'BOTTOMLEFT' },
        { 'Attributes', 'filter', 'HARMFUL' },
        { 'Attributes', 'tooltipAnchor', 'ANCHOR_BOTTOMRIGHT' },
        { 'Attributes', 'num', 6 },
    }

    local size = #data

    if layout == 'Expanded' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMLEFT', 'Frame', 'BOTTOMRIGHT', 2, 0 }
        data[size+3] = { 'Attributes', 'size', 46 }
    elseif layout == 'Compact' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMLEFT', 'Frame', 'BOTTOMRIGHT', 2, 0 }
        data[size+3] = { 'Attributes', 'size', 32 }
    elseif layout == 'Minimalist' then
        data[size+1] = { nil, 'Dimension', 6, 1 } --column, row
        data[size+2] = { nil, 'Point', 'BOTTOMLEFT', 'Frame', 'BOTTOMRIGHT', 2, 0 }
        data[size+3] = { 'Attributes', 'size', 32 }
    end

    registers(module, submodule, 'Debuffs', data)

end

local function indicatorOption(module, submodule, indicator, size, point, texture, texcoord, vertexcolor, gradientalpha, blendmode)
    local data = {
        { indicator, 'Enable', enable },
        { indicator, 'Size', unpack(size) },
        { indicator, 'Point', unpack(point) },
        { indicator, 'Texture', texture },
        { indicator, 'TexCoord', texcoord },
        { indicator, 'VertexColor', vertexcolor },
        { indicator, 'GradientAlpha', gradientalpha },
        { indicator, 'BlendMode', blendmode },
    }

    registers(module, submodule, 'Indicators', data)
end

local function headerOption(module, submodule)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Name', 'VorkuiParty')
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Template', nil)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Visibility', 'custom [@raid6,exists] hide;show')
end

local function  attributesOption (layout, module, submodule)

    Profiles:RegisterOption(module, submodule, nil, nil, 'Layout', layout)

    if layout == 'Expanded' then
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'TOP')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 190)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 58)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 5)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', -30)
    elseif layout == 'Minimalist' then
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'TOP')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 150)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 44)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', -25)
    elseif layout == 'Compact' then
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'TOP')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 156)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 24)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', -26)
    else
        print ("|cFFFF1010 BAD PARTY LAYOUT |r")
    end
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupFilter', '1,2,3,4,5,6,7,8')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showRaid', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showParty', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showPlayer', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showSolo', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortMethod', 'INDEX')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortDir', 'ASC')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupBy', 'GROUP')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupingOrder', '1,2,3,4,5,6,7,8')
end

local function generalOption(module, submodule, layout)
    local data = {
        --{ nil, 'Size', 300, 62 },
        { nil, 'Point', 'CENTER', 'UIParent', 'CENTER', -500, 150 },
        { 'Background', 'Enable', true },
        { 'Background', 'Color', 33 / 255, 44 / 255, 79 / 255, 0.75 },
        { 'Fonts', 'NameFont', 'Montserrat Medium', 20, 'OUTLINE'},
        { 'Fonts', 'NormalFont', 'Montserrat Medium', 12, 'OUTLINE'},
        { 'Fonts', 'StackFont', 'Montserrat Medium Italic', 16, 'OUTLINE'},
        { 'Fonts', 'DurationFont', 'Montserrat Medium', 12, 'OUTLINE'},
        { 'Fonts', 'BigValueFont', 'Montserrat Medium Italic', 18, 'OUTLINE'},
        { 'Fonts', 'ValueFont', 'Montserrat Medium Italic', 14, 'OUTLINE'},
    }

    if layout == 'EXPANDED' then
        data[#data+1] = {nil, 'Size', 195, 5*58+4*30}
    elseif layout == 'COMPACT' then
        data[#data+1] = {nil, 'Size', 156, 5*24+4*26}
    elseif layout == 'MINIMALIST' then
        data[#data+1] = {nil, 'Size', 150, 5*44+4*25}
    end

    registers(module, submodule, 'General', data)
end

--(module, submodule, object, component, type, optionName, defaultValue)
Themes["Default"].SetPartyProfile = function(layout)

    local module = 'UnitFrames'
    local submodule = 'PartyLayout'

    --Global OPTION
    generalOption(module, submodule)
    headerOption(module, submodule)
    attributesOption(layout, module, submodule)

    --Unit OPTION
    healthOption(layout, module, submodule)
    healthPredictionOption(layout, module, submodule)
    absorbOption(layout, module, submodule)
    powerOption(layout, module, submodule)
    portraitOption(layout, module, submodule)

    indicatorOption(module, submodule, 'ClassIndicator',
            { 16, 16 },
            { 'TOPLEFT', 'Frame', 'TOPLEFT', -4, -2 },
            'ClassIcon',
            select(2, UnitClass("player")),
            nil,
            nil,
            nil
    )

    indicatorOption(module, submodule, 'RaidTargetIndicator',
            { 16, 16 },
            { 'LEFT', 'Health', 'RIGHT', 0, 0 },
            'RaidIcon',
            nil,
            nil,
            nil,
            nil
    )

    indicatorOption(module, submodule, 'LeaderIndicator',
            { 64 / 4, 53 / 4 },
            { 'TOPRIGHT', 'Frame', 'TOPRIGHT' },
            'GlobalIcon',
            'MASTERY',
            { 163 / 255, 220 / 255, 255 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'DeadOrGhostIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Status',
            'DIED',
            { 255 / 255, 68 / 255, 91 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'ResurrectIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER', 0, 0 },
            'Status',
            'RESURRECT',
            { 30 / 255, 223 / 255, 100 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'SummonIndicator',
            { 20, 20 },
            { 'CENTER', 'Health', 'CENTER' },
            'Phasing',
            'SUMMON',
            { 0 / 255, 204 / 255, 255 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'PhaseIndicator',
            { 20, 20 },
            { 'CENTER', 'Health', 'CENTER' },
            'Phasing',
            'PHASE',
            { 0 / 255, 204 / 255, 255 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'GroupRoleIndicator',
            { 20, 20 },
            { 'LEFT', 'Name', 'RIGHT' }
    )

    castbarOption(layout, module, submodule)
    buffOption(layout, module, submodule)
    debuffOption(layout, module, submodule)

    textOption(module, submodule, 'HealthValue',
            'OVERLAY',
            'ValueFont',
            '[Vorkui:HealthColor(false)][Vorkui:Deficit:Curhp]',
            {
                ['Expanded'] = {'TOPRIGHT', 'Health', 'TOP'},
                ['Minimalist'] = {'TOPRIGHT', 'Health', 'TOP'},
                ['Compact'] = {'CENTER', 'Health', 'CENTER'}
            },
            layout
    )

    textOption(module, submodule, 'HealthPercent',
            'OVERLAY',
            'BigValueFont',
            '[Vorkui:HealthColor(true)][Vorkui:PerHP]',
            { 'BOTTOMRIGHT', 'Frame', 'BOTTOMRIGHT' }
    )

    textOption(module, submodule, 'PowerValue',
            'OVERLAY',
            'StackFont',
            '[powercolor][missingpp]',
            {
                ['Expanded'] = {'BOTTOM', 'Frame'},
                ['Minimalist'] = nil,
                ['Compact'] = nil
            },
            layout
    )

    textOption(module, submodule, 'AbsorbValue',
            'OVERLAY',
            'ValueFont',
            '[Vorkui:HealthColor][Vorkui:Absorb]',
            {"TOPLEFT", 'Health', "TOP"}
    )

    textOption(module, submodule, 'Name',
            'OVERLAY',
            'NameFont',
            '[classification] [name(5)] [difficulty][level]',
            {
                ['Expanded'] = {'TOPRIGHT', 'Frame', 'TOPRIGHT', -20, 0},
                ['Minimalist'] = {'TOPRIGHT', 'Frame', 'TOPRIGHT', -20, 0},
                ['Compact'] = {'LEFT', 'Frame', 'RIGHT', 20, 0}
            },
            layout
    )

end