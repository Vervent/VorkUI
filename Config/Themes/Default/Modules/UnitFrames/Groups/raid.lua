---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by f.guilleminot.
--- DateTime: 31/12/2020 09:32
---

local V, C = select(2, ...):unpack()

local Themes = V.Themes
local Profiles = V.Profiles

local function registers(module, submodule, object, table)
    for _, item in ipairs(table) do
        Profiles:RegisterOption(module, submodule, object, unpack(item))
    end
end

local function textOption(module, submodule, name, layer, font, tag, points, layout)

    local data = {
        { name, 'Layer', layer },
        { name, 'Font', font },
        { name, 'Tag', tag },
    }

    if points[layout] ~= nil then
        data[4] = { name, 'Point', points[layout] }
    elseif type(points[1]) == 'string' then
        data[4] = { name, 'Point', points }
    end

    registers(module, submodule, 'Texts', data)
end

local function absorbOption(layout, module, submodule)

    local data = {
        { nil, 'Enable', true },
        { 'SlantingSettings', 'Enable', false },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'FillInverse', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiBubbles', 'ARTWORK' },
        { 'Rendering', nil, { 0, 0, 0, 1 }, 'BACKGROUND', 1 },
    }

    local size = #data

    if layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 80, 10 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT' }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 90, 6 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT', 2, 0 }
    end

    registers(module, submodule, 'Absorb', data)

end

local function healthOption(layout, module, submodule)
    local data = {
        --TRANSFORM
        { nil, 'Enable', true },
        ----SLANT
        { 'SlantingSettings', 'Enable', false },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBackground', 'BACKGROUND', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        --ATTRIBUTES
        { 'Attributes', 'colorSmooth', true },
        { 'Attributes', 'colorClass', true },

    }

    local size = #data

    if layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 80, 38 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'BOTTOMRIGHT' }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 94, 12 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'BOTTOMRIGHT' }
    else
        print ('|cFFFF1010 BAD RAID LAYOUT |r')
    end

    registers(module, submodule, 'Health', data)

end

local function healthPredictionOption(layout, module, submodule)
    local data = {
        ----SLANT
        { nil, 'Enable', true },
        { 'SlantingSettings', 'Enable', false },
        { 'SlantingSettings', 'IgnoreBackground', true },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
    }

    local size = #data

    if layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 80, 38 }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 94, 12 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'BOTTOMRIGHT' }
    else
        print ('|cFFFF1010 BAD RAID LAYOUT |r')
    end

    registers(module, submodule, 'HealthPrediction', data)

end

local function powerOption(layout, module, submodule)
    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        { nil, 'Size', 80, 12 },
        { nil, 'Point', 'TOPRIGHT', 'Health', 'BOTTOMRIGHT' },
        ----SLANT
        { 'SlantingSettings', 'Enable', false },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        { 'Attributes', 'colorPower', true },
        { 'Attributes', 'frequentUpdates', true },
        --TAGS
    }

    registers(module, submodule, 'Power', data)

end

local function indicatorOption(module, submodule, indicator, size, point, texture, texcoord, vertexcolor, gradientalpha, blendmode)
    local data = {
        { indicator, 'Enable', enable },
        { indicator, 'Size', unpack(size) },
        { indicator, 'Point', unpack(point) },
        { indicator, 'Texture', texture },
        { indicator, 'TexCoord', texcoord },
        { indicator, 'VertexColor', vertexcolor },
        { indicator, 'GradientAlpha', gradientalpha },
        { indicator, 'BlendMode', blendmode },
    }

    registers(module, submodule, 'Indicators', data)
end

local function headerOption(module, submodule)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Name', 'VorkuiRaid')
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Template', nil)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Visibility', 'custom [@raid6,exists] show;hide')
end

local function  attributesOption (layout, module, submodule)

    Profiles:RegisterOption(module, submodule, nil, nil, 'Layout', layout)

    if layout == 'Minimalist' then

        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'TOP')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 80)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 60)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 2)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', -2)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'unitsPerColumn', 5)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'maxColumns', 8)
    elseif layout == 'Compact' then
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'TOP')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 46)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 30)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 2)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', -2)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'unitsPerColumn', 20)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'maxColumns', 2)
    else
        print ("|cFFFF1010 BAD RAID LAYOUT |r")
    end
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupFilter', '1,2,3,4,5,6,7,8')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showRaid', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showParty', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showPlayer', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showSolo', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortMethod', 'INDEX')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortDir', 'ASC')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupBy', 'GROUP')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupingOrder', '1,2,3,4,5,6,7,8')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'columnSpacing', 4)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'columnAnchorPoint', 'LEFT')
end

local function generalOption(module, submodule, layout)
    local data = {
        { 'Background', 'Enable', true },
        { 'Background', 'Color', 33 / 255, 44 / 255, 79 / 255, 0.75 },
        { nil, 'NameFont', 'Montserrat SemiBold', 12, 'OUTLINE'},
        { nil, 'NormalFont', 'Montserrat Medium', 12, 'OUTLINE'},
        { nil, 'StackFont', 'Montserrat Medium Italic', 16, 'OUTLINE'},
        { nil, 'DurationFont', 'Montserrat Medium', 12, 'OUTLINE'},
        { nil, 'BigValueFont', 'Montserrat Medium Italic', 18, 'OUTLINE'},
        { nil, 'ValueFont', 'Montserrat SemiBold Italic', 14, 'OUTLINE'},
    }

    local size = #data

    if layout == 'Compact' then
        data[size + 1] = { nil, 'Point', 'LEFT', 'UIParent', 'LEFT', 10, 0 }
        data[size + 2] = { nil, 'Size', 47*2, 31*20}
    elseif layout == 'Minimalist' then
        data[size + 1] = { nil, 'Point', 'BOTTOM', 'UIParent', 'BOTTOM', 0, 10 }
        data[size + 2] = { nil, 'Size', 80*8, 50*5}
    end

    registers(module, submodule, 'General', data)
end

--(module, submodule, object, component, type, optionName, defaultValue)
Themes["Default"].SetRaidProfile = function(layout)

    local module = 'UnitFrames'
    local submodule = 'RaidLayout'

    --Global OPTION
    generalOption(module, submodule, layout)
    headerOption(module, submodule)
    attributesOption(layout, module, submodule)

    --Unit OPTION
    healthOption(layout, module, submodule)
    healthPredictionOption(layout, module, submodule)
    absorbOption(layout, module, submodule)
    powerOption(layout, module, submodule)

    --indicatorOption(module, submodule, 'ClassIndicator',
    --        { 16, 16 },
    --        { 'BOTTOMLEFT', 'Frame', 'BOTTOMLEFT', 0, 0 },
    --        'ClassIcon'
    --)

    indicatorOption(module, submodule, 'RaidTargetIndicator',
            { 16, 16 },
            { 'TOPLEFT', 'Frame', 'TOPLEFT', 0, 0 },
            'RaidIcon'
    )

    indicatorOption(module, submodule, 'LeaderIndicator',
            { 64 / 4, 53 / 4 },
            { 'LEFT', 'Frame', 'RIGHT' },
            'GlobalIcon',
            'LEADER',
            { 163 / 255, 220 / 255, 255 / 255 }
    )

    indicatorOption(module, submodule, 'DeadOrGhostIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Status',
            'DIED',
            { 255 / 255, 68 / 255, 91 / 255 }
    )

    indicatorOption(module, submodule, 'ResurrectIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER', 0, 0 },
            'Status',
            'RESURRECT',
            { 30 / 255, 223 / 255, 100 / 255 }
    )

    indicatorOption(module, submodule, 'SummonIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Phasing',
            'SUMMON',
            { 0 / 255, 204 / 255, 255 / 255 }
    )

    indicatorOption(module, submodule, 'PhaseIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Phasing',
            'PHASE',
            { 0 / 255, 204 / 255, 255 / 255 }
    )
    --textOption(module, submodule, 'HealthValue',
    --        'OVERLAY',
    --        'ValueFont',
    --        '[Vorkui:HealthColor(false)][Vorkui:Deficit:Curhp]',
    --        {
    --            ['Minimalist'] = {'TOP', 'Health'},
    --            ['Compact'] = {'CENTER', 'Health', 'CENTER'}
    --        },
    --        layout
    --)

    textOption(module, submodule, 'HealthPercent',
            'OVERLAY',
            'BigValueFont',
            '[Vorkui:HealthColor(true)][Vorkui:PerHP]',
            { 'CENTER', 'Frame', 'CENTER' }
    )

    textOption(module, submodule, 'Name',
            'OVERLAY',
            'NameFont',
            '[Vorkui:Name(5)]',
            {
                ['Minimalist'] = {'BOTTOM', 'Frame'},
                ['Compact'] = {'BOTTOM', 'Frame'}
            },
            layout
    )

end