---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by f.guilleminot.
--- DateTime: 31/12/2020 09:32
---

local V, C = select(2, ...):unpack()

local Themes = V.Themes
local Profiles = V.Profiles

local function registers(module, submodule, object, table)
    for _, item in ipairs(table) do
        Profiles:RegisterOption(module, submodule, object, unpack(item))
    end
end

local function absorbOption(layout, module, submodule)

    local data = {
        { nil, 'Enable', true },
        { 'SlantingSettings', 'Enable', true },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'FillInverse', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiBubbles', 'ARTWORK' },
        { 'Rendering', nil, { 0, 0, 0, 1 }, 'BACKGROUND', 1 },
    }

    --if layout == 'Expanded' then
    --elseif layout == 'Minimalist' then
    --elseif layout == 'Compact' then
    --  print ('|cFFFF1010 BAD PARTY LAYOUT |r')
    --end

    local size = #data

    if layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 116, 6 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT', 0, -12 }
        --TAGS
        data[size + 3] = { 'Value', 'Layer', 'OVERLAY' }
        data[size + 4] = { 'Value', 'Font', 'ValueFont' }
        data[size + 5] = { 'Value', 'Point', "TOPLEFT", 'Health', "TOP" }
        data[size + 6] = { 'Value', 'Tag', '[Vorkui:HealthColor][Vorkui:Absorb]' }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 90, 6 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Frame', 'TOPRIGHT', 2, 0 }
    end

    registers(module, submodule, 'Absorb', data)

end

local function healthOption(layout, module, submodule)
    local data = {
        --TRANSFORM
        { nil, 'Enable', enable },
        ----SLANT
        { 'SlantingSettings', 'Enable', true },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBackground', 'BACKGROUND', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        --TAGS
        { 'Value', 'Layer', 'OVERLAY' },
        { 'Value', 'Font', 'ValueFont' },
        { 'Value', 'Tag', '[Vorkui:HealthColor(false)][Vorkui:Deficit:Curhp]' },

        { 'Percent', 'Layer', 'OVERLAY' },
        { 'Percent', 'Font', 'BigValueFont' },
        { 'Percent', 'Point', 'BOTTOMRIGHT', 'Frame', 'BOTTOMRIGHT' },
        { 'Percent', 'Tag', '[Vorkui:HealthColor(true)][Vorkui:PerHP]' },
    }

    local size = #data

    if layout == 'Minimalist' then
        data[size + 1] = { nil, 'Size', 126, 16 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'TOPRIGHT', -4, 0 }
        data[size + 3] = { 'Value', 'Point', 'TOPRIGHT', 'Health', 'TOP' }
    elseif layout == 'Compact' then
        data[size + 1] = { nil, 'Size', 94, 12 }
        data[size + 2] = { nil, 'Point', 'TOPRIGHT', 'Absorb', 'TOPRIGHT', -7, 0 }
        data[size + 3] = { 'Value', 'Point', 'CENTER', 'Health', 'CENTER' }
    else
        print ('|cFFFF1010 BAD RAID LAYOUT |r')
    end

    registers(module, submodule, 'Health', data)

end

local function healthPredictionOption(layout, module, submodule)
    local data = {
        ----SLANT
        { nil, 'Enable', enable },
        { 'SlantingSettings', 'Enable', true },
        { 'SlantingSettings', 'IgnoreBackground', true },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
    }

    registers(module, submodule, 'HealthPrediction', data)

end

local function nameOption(layout, module, submodule)
    local data = {
        { nil, 'Enable', true },
        --TAGS
        { nil, 'Layer', 'OVERLAY' },
        { nil, 'Font', 'NameFont' },
        { nil, 'Tag', '[Vorkui:Name(5)] [difficulty][level]' },
    }

    if layout == 'Minimalist' then
        data[#data + 1] = { nil, 'Point', 'TOPRIGHT', nil, 'TOPRIGHT', -20, 0 }
    elseif layout == 'Compact' then
        data[#data + 1] = { nil, 'Point', 'BOTTOM', nil, 'BOTTOM', 0, 0 }
    else
        print ("|cFFFF1010 BAD RAID LAYOUT |r")
    end

    registers(module, submodule, 'Name', data)
end

local function powerOption(layout, module, submodule)
    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        { nil, 'Size', 118, 8 },
        { nil, 'Point', 'TOPLEFT', 'Health', 'BOTTOMLEFT', -8, 0 },
        ----SLANT
        { 'SlantingSettings', 'Enable', true },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'StaticLayer', 'BACKGROUND' },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK' },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
        --TAGS
    }

    registers(module, submodule, 'Power', data)

end

local function powerPredictionOption(layout, module, submodule)
    local enable = true

    if layout == 'Compact' then
        enable = false
    end

    local data = {
        { nil, 'Enable', enable },
        ----SLANT
        { 'SlantingSettings', 'Enable', true },
        { 'SlantingSettings', 'IgnoreBackground', true },
        { 'SlantingSettings', 'FillInverse', true },
        --RENDERING
        { 'Rendering', nil, 'VorkuiDefault', 'ARTWORK', 1 },
        { 'Rendering', nil, 'VorkuiBorder', 'OVERLAY' },
    }

    registers(module, submodule, 'PowerPrediction', data)

end
--
--local function buffOption(layout, module, submodule)
--
--    local enable = true
--
--    if layout ~= 'Expanded' then
--        enable = false
--    end
--
--    local data = {
--        { nil, 'Enable', enable },
--        --TRANSFORM
--        { nil, 'Size', 24*6 + 2*5, 24 },
--        { nil, 'Point', 'BOTTOMLEFT', 'Frame', 'TOPLEFT', 0, 2 },
--        { nil, 'ButtonSize', 24 },
--        { nil, 'ButtonCount', 6 },
--        { nil, 'ButtonSpacing', 2 },
--        { nil, 'OnlyShowPlayer', true },
--    }
--
--    registers(module, submodule, 'Buffs', data)
--
--end
--
--local function debuffOption(layout, module, submodule)
--
--    local enable = true
--
--    if layout ~= 'Compact' then
--        enable = false
--    end
--
--    local data = {
--        { nil, 'Enable', enable },
--        --TRANSFORM
--        { nil, 'Size', 24*6 + 2*5, 24 },
--        { nil, 'Point', 'TOPLEFT', 'Frame', 'BOTTOMLEFT', 0, 2 },
--        { nil, 'ButtonSize', 24 },
--        { nil, 'ButtonCount', 6 },
--        { nil, 'ButtonSpacing', 2 },
--    }
--
--    registers(module, submodule, 'Debuffs', data)
--
--end

local function indicatorOption(module, submodule, indicator, size, point, texture, texcoord, vertexcolor, gradientalpha, blendmode)
    local data = {
        { nil, 'Enable', enable },
        { nil, 'Size', unpack(size) },
        { nil, 'Point', unpack(point) },
        { nil, 'Texture', texture },
        { nil, 'TexCoord', texcoord },
        { nil, 'VertexColor', vertexcolor },
        { nil, 'GradientAlpha', gradientalpha },
        { nil, 'BlendMode', blendmode },
    }

    registers(module, submodule, indicator, data)
end

local function headerOption(module, submodule)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Name', 'VorkuiRaid')
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Template', nil)
    Profiles:RegisterOption(module, submodule, nil, 'Header', 'Visibility', 'custom [@raid6,exists] show;hide')
end

local function  attributesOption (layout, module, submodule)

    Profiles:RegisterOption(module, submodule, nil, nil, 'Layout', layout)

    if layout == 'Minimalist' then
        Profiles:RegisterOption(module, submodule, nil, nil, 'Size', 150*8 + 5*7, 5*46+4)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'BOTTOM')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 150)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 46)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'unitsPerColumn', 5)
    elseif layout == 'Compact' then
        Profiles:RegisterOption(module, submodule, nil, nil, 'Size', 100*4 + 5*3, 10*30+9)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'point', 'BOTTOM')
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-width', 100)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'initial-height', 30)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'xOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'yOffset', 1)
        Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'unitsPerColumn', 10)
    else
        print ("|cFFFF1010 BAD RAID LAYOUT |r")
    end
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupFilter', '1,2,3,4,5,6,7,8')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showRaid', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showParty', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showPlayer', true)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'showSolo', false)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortMethod', 'INDEX')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'sortDir', 'ASC')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupBy', 'GROUP')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'groupingOrder', '1,2,3,4,5,6,7,8')
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'columnSpacing', 4)
    Profiles:RegisterOption(module, submodule, 'Attributes', nil, 'columnAnchorPoint', 'LEFT')
end

--(module, submodule, object, component, type, optionName, defaultValue)
Themes["Default"].SetRaidProfile = function(layout)

    local module = 'UnitFrames'
    local submodule = 'RaidLayout'

    --Global OPTION
    Profiles:RegisterOption(module, submodule, nil, nil, 'Point', 'CENTER', 'UIParent', 'CENTER', -450, -350)

    headerOption(module, submodule)
    attributesOption(layout, module, submodule)

    --Unit OPTION
    healthOption(layout, module, submodule)
    healthPredictionOption(layout, module, submodule)
    absorbOption(layout, module, submodule)
    powerOption(layout, module, submodule)
    powerPredictionOption(layout, module, submodule)

    indicatorOption(module, submodule, 'ClassIndicator',
            { 16, 16 },
            { 'BOTTOMLEFT', 'Frame', 'BOTTOMLEFT', 0, 0 },
            'ClassIcon',
            select(2, UnitClass("player")),
            nil,
            nil,
            nil
    )

    indicatorOption(module, submodule, 'RaidIndicator',
            { 16, 16 },
            { 'TOPLEFT', 'Frame', 'TOPLEFT', 0, 0 },
            'RaidIcon',
            nil,
            nil,
            nil,
            nil
    )

    indicatorOption(module, submodule, 'LeaderIndicator',
            { 64 / 4, 53 / 4 },
            { 'LEFT', 'Frame', 'RIGHT' },
            'GlobalIcon',
            'LEADER',
            { 163 / 255, 220 / 255, 255 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'DeadOrGhostIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Status',
            'DIED',
            { 255 / 255, 68 / 255, 91 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'ResurrectIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER', 0, 0 },
            'Status',
            'RESURRECT',
            { 30 / 255, 223 / 255, 100 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'SummonIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Phasing',
            'SUMMON',
            { 0 / 255, 204 / 255, 255 / 255 },
            nil,
            nil
    )

    indicatorOption(module, submodule, 'PhaseIndicator',
            { 20, 20 },
            { 'CENTER', 'Frame', 'CENTER' },
            'Phasing',
            'PHASE',
            { 0 / 255, 204 / 255, 255 / 255 },
            nil,
            nil
    )

    nameOption(layout, module, submodule)
    --buffOption(layout, module, submodule)
    --debuffOption(layout, module, submodule)

    --[[ TODO TEMPORARY FONT TO KEEP COMPATIBILTY WITH OLD EDITOR
    ["NameFont"] = {
				"Montserrat Medium", -- [1]
				20, -- [2]
				"OUTLINE", -- [3]
			},
    ["NormalFont"] = {
				"Montserrat Medium", -- [1]
				12, -- [2]
				"OUTLINE", -- [3]
			},
    ["StackFont"] = {
				"Montserrat Medium Italic", -- [1]
				16, -- [2]
				"OUTLINE", -- [3]
			},
	["DurationFont"] = {
				"Montserrat Medium", -- [1]
				12, -- [2]
				"OUTLINE", -- [3]
			},
	["BigValueFont"] = {
				"Montserrat Medium Italic", -- [1]
				18, -- [2]
				"OUTLINE", -- [3]
			},
	["ValueFont"] = {
				"Montserrat Medium Italic", -- [1]
				14, -- [2]
				"OUTLINE", -- [3]
			},

	["Submodules"] = {
				["Absorb"] = true,
				["Portrait"] = true,
				["Power"] = true,
				["LeaderIndicator"] = true,
				["Debuffs"] = true,
				["ResurrectIndicator"] = true,
				["SummonIndicator"] = true,
				["CastBar"] = true,
				["RestingIndicator"] = true,
				["CombatIndicator"] = true,
				["ClassIndicator"] = true,
				["DeadOrGhostIndicator"] = true,
				["Buffs"] = true,
				["FightIndicator"] = true,
				["RaidIndicator"] = true,
			},
    ]]--

    Profiles:RegisterOption(module, submodule, nil, nil, 'NameFont', 'Montserrat Medium', 20, 'OUTLINE')
    Profiles:RegisterOption(module, submodule, nil, nil, 'NormalFont', 'Montserrat Medium', 12, 'OUTLINE')
    Profiles:RegisterOption(module, submodule, nil, nil, 'StackFont', 'Montserrat Medium Italic', 16, 'OUTLINE')
    Profiles:RegisterOption(module, submodule, nil, nil, 'DurationFont', 'Montserrat Medium', 12, 'OUTLINE')
    Profiles:RegisterOption(module, submodule, nil, nil, 'BigValueFont', 'Montserrat Medium Italic', 18, 'OUTLINE')
    Profiles:RegisterOption(module, submodule, nil, nil, 'ValueFont', 'Montserrat Medium Italic', 14, 'OUTLINE')

end